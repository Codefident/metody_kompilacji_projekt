start: stmt+

?stmt: assign
    | expr

assign: NAME "=" expr

expr: NAME
    | NUMBER
    | STRING
    | expr "+" expr   -> add
    | expr "-" expr   -> sub
    | expr "*" expr   -> mul
    | expr "/" expr   -> div
    | expr "//" expr  -> floordiv
    | expr "%" expr   -> mod
    | "(" expr ")"
    | flow_stmt

// loops
for_loop: "for" NAME "in" expr ":" block
while_loop: "while" expr ":" block

// break, continue, return
?flow_stmt: break_stmt | continue_stmt | return_stmt
break_stmt: "break"
continue_stmt: "continue"
return_stmt: "return" [expr]

// if and tests
if_stmt: "if" test ":" block elifs ["else" ":" block]
elifs: elif_*
elif_: "elif" test ":" block

?test: or_test ("if" or_test "else" test)?
?or_test: and_test ("or" and_test)*
?and_test: not_test_ ("and" not_test_)*
?not_test_: "not" not_test_ -> not_test
         | comparison
?comparison: expr (comp_op expr)*

!comp_op: "<"|">"|"=="|">="|"<="|"<>"|"!="|"in"|"not" "in"|"is"|"is" "not"

block: NEWLINE _INDENT stmt+ _DEDENT

NAME: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /\d+/
STRING: /"([^"]*)"/

%import common.WS
%ignore WS
%import common.NEWLINE
%declare _INDENT _DEDENT