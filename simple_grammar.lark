start: (_NEWLINE | stmt)*

?stmt: compound_stmt | simple_stmt

?simple_stmt: small_stmt (";" small_stmt)* [";"] _NEWLINE
?small_stmt: (assign_stmt | expr)

?compound_stmt: func_def
    | if_stmt
    | for_stmt
    | while_stmt

assign_stmt: augassign | assign
augassign: name augassign_op expr
assign: name "=" expr

!augassign_op:
    | "+="
    | "-="
    | "*="
    | "/="
    | "%="

expr: NAME
    | NUMBER
    | STRING
    | expr "+" expr   -> add
    | expr "-" expr   -> sub
    | expr "*" expr   -> mul
    | expr "/" expr   -> div
    | expr "//" expr  -> floordiv
    | expr "%" expr   -> mod
    | "(" expr ")"
    | list_expr
    | func_call
    | flow_stmt

// data
list_expr: "[" [expr ("," expr)*] "]"

// loops
for_stmt: "for" NAME "in" expr ":" block
while_stmt: "while" expr ":" block

// break, continue, return
?flow_stmt: break_stmt | continue_stmt | return_stmt
break_stmt: "break"
continue_stmt: "continue"
return_stmt: "return" [expr]

// if and tests
if_stmt: "if" test ":" block elifs ["else" ":" block]
elifs: elif_*
elif_: "elif" test ":" block

// functions
func_def: "def" NAME "(" [params] "):" block
func_call: NAME "(" [arguments] ")"
params: name ("," name)*
arguments: expr ("," expr)*

?test: or_test ("if" or_test "else" test)?
?or_test: and_test ("or" and_test)*
?and_test: not_test_ ("and" not_test_)*
?not_test_: "not" not_test_ -> not_test
         | comparison
?comparison: expr (comp_op expr)*

!comp_op: "<"|">"|"=="|">="|"<="|"<>"|"!="|"in"|"not" "in"|"is"|"is" "not"

block: simple_stmt | _NEWLINE _INDENT stmt+ _DEDENT

!name: NAME

NAME: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /\d+/
STRING: /"([^"]*)"/

%import common.WS_INLINE
%ignore WS_INLINE
_NEWLINE: /(\r?\n[\t ]*)+/
%declare _INDENT _DEDENT