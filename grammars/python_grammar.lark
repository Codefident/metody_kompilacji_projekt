start: (_NEWLINE | stmt)*

?stmt: compound_stmt | simple_stmt

?simple_stmt: small_stmt (";" small_stmt)* [";"] _NEWLINE
?small_stmt: (assign_stmt | flow_stmt | expr)

?compound_stmt: func_def | if_stmt | for_stmt | while_stmt

assign_stmt: augassign | assign
augassign: atom_expr augassign_op expr
assign: atom_expr "=" expr

!augassign_op: "+=" -> aug_add
    | "-=" -> aug_sub
    | "*=" -> aug_mul
    | "/=" -> aug_div
    | "%=" -> aug_mod

expr: expr "+" expr   -> add
    | expr "-" expr   -> sub
    | expr "*" expr   -> mul
    | expr "/" expr   -> div
    | expr "//" expr  -> floordiv
    | expr "%" expr   -> mod
    | expr "**" expr  -> pow
    | atom_expr

atom_expr: atom_expr "(" [arguments] ")"    -> func_call
    | atom_expr "[" expr "]"    -> index_access
    | atom_expr "." NAME        -> dot_access
    | atom

atom: NAME
    | NUMBER
    | STRING
    | "(" expr ")"
    | "True"    -> true_
    | "False"   -> false_
    | "None"    -> none_
    | list_expr
    | obj_expr
    

// data
obj_expr: "{}" | "{" [obj_item ("," obj_item)*] "}"
obj_item: "\"" NAME "\"" ":" expr
list_expr: "[]" | "[" [expr ("," expr)*] "]"


// loops
for_stmt: "for" NAME "in" expr ":" block
while_stmt: "while" test ":" block

// break, continue, return
?flow_stmt: break_stmt | continue_stmt | return_stmt
break_stmt: "break"
continue_stmt: "continue"
return_stmt: "return" [expr]

// if and tests
if_stmt: "if" test ":" block elif_* [else_]
elif_: "elif" test ":" block
else_: "else" ":" block

// functions
func_def: "def" NAME "(" [params] ")" ":" block
params: NAME ("," NAME)*
arguments: expr ("," expr)*

?test: or_test ("if" or_test "else" test)?
?or_test: and_test ("or" and_test)*
?and_test: not_test_ ("and" not_test_)*
?not_test_: "not" not_test_ -> not_test
         | comparison
?comparison: expr (comp_op expr)*

!comp_op:
    | "<"     -> lower_than
    | ">"     -> greater_than
    | "=="    -> equals
    | ">="    -> greater_or_equals
    | "<="    -> lower_or_equals
    | "<>"    -> not_equals_legacy
    | "!="    -> not_equals
    | "in"    -> in_operator
    | "not" "in" -> not_in_operator
    | "is"    -> is_operator
    | "is" "not" -> is_not_operator

block: simple_stmt | _NEWLINE _INDENT stmt+ _DEDENT

NAME: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER.2: /-?\d+(\.\d+)?/
STRING: /"([^"]*)"/
COMMENT: /#[^\n]*/

%import common.WS_INLINE
%ignore WS_INLINE
//_NEWLINE: /(\r?\n[\t ]*)+/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+
%declare _INDENT _DEDENT