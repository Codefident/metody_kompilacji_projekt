start: (_NEWLINE | stmt)*

?stmt: compound_stmt | simple_stmt

?simple_stmt: small_stmt (";" small_stmt)* [";"] _NEWLINE
?small_stmt: (assign_stmt | flow_stmt | expr)

?compound_stmt: func_def | if_stmt | for_stmt | while_stmt

assign_stmt: augassign | assign
augassign: assign_target augassign_op expr
assign: assign_target "=" expr

assign_target: NAME | dot_access | index_access

!augassign_op: "+=" -> aug_add
    | "-=" -> aug_sub
    | "*=" -> aug_mul
    | "/=" -> aug_div
    | "%=" -> aug_mod

expr: expr "+" expr   -> add
    | expr "-" expr   -> sub
    | expr "*" expr   -> mul
    | expr "/" expr   -> div
    | expr "//" expr  -> floordiv
    | expr "%" expr   -> mod
    | expr "**" expr  -> pow
    | NUMBER    // previously in atom, moved to expr to prevent using numbers in dot access
    | "-" NUMBER    -> negative_number
    | atom_expr

atom_expr: func_call
    | index_access
    | dot_access
    | atom

atom: NAME
    | STRING
    | "(" expr ")"
    | TRUE
    | FALSE
    | NONE
    | list_expr
    | obj_expr
    

// data
obj_expr: "{}" | "{" [obj_item ("," obj_item)*] "}"
obj_item: "\"" NAME "\"" ":" expr
list_expr: "[]" | "[" [expr ("," expr)*] "]"
func_call: atom_expr "(" [arguments] ")"
index_access: atom_expr "[" expr "]"
dot_access: atom_expr "." NAME

// loops
for_stmt: FOR NAME IN expr ":" block
while_stmt: WHILE test ":" block

// break, continue, return
?flow_stmt: break_stmt | continue_stmt | return_stmt
break_stmt: BREAK
continue_stmt: CONTINUE
return_stmt: RETURN [expr]

// if and tests
if_stmt: IF test ":" block elif_* [else_]
elif_: ELIF test ":" block
else_: ELSE ":" block

// functions
func_def: DEF NAME "(" [params] ")" ":" block
params: NAME ("," NAME)*
arguments: expr ("," expr)*

?test: or_test (IF or_test ELSE test)?
?or_test: and_test (OR and_test)*
?and_test: not_test_ (AND not_test_)*
?not_test_: NOT not_test_ -> not_test
         | comparison
?comparison: expr (comp_op expr)*

!comp_op:
    | "<"     -> lower_than
    | ">"     -> greater_than
    | "=="    -> equals
    | ">="    -> greater_or_equals
    | "<="    -> lower_or_equals
    | "<>"    -> not_equals_legacy
    | "!="    -> not_equals
    | IN    -> in_operator
    | NOT IN -> not_in_operator
    | IS    -> is_operator
    | IS NOT -> is_not_operator

block: simple_stmt | _NEWLINE _INDENT stmt+ _DEDENT


// tokens
TRUE: "True"
FALSE: "False"
NONE: "None"
FOR: "for"
WHILE: "while"
IN: "in"
BREAK: "break"
CONTINUE: "continue"
RETURN: "return"
IF: "if"
ELSE: "else"
ELIF: "elif"
OR: "or"
AND: "and"
IS: "is"
NOT: "not"
DEF: "def"
NAME: /(?!(break|continue|return|if|else|elif|for|while|in|not|and|or|is|def|True|False|None)\b)[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /\d+(\.\d+)?/
STRING: /"([^"]*)"/
COMMENT: /#[^\n]*/

%import common.WS_INLINE
%ignore WS_INLINE
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+
%declare _INDENT _DEDENT