start: stmt+

?stmt: assign
          | funcdef
          | for_loop
          | while_loop
          | if_stmt
          | import_stmt
          | return_stmt
          | break_stmt
          | continue_stmt
          | expr

// assignments
assign: (NAME ("," NAME)*) "=" (expr ("," expr)*)
      | NAME augassign expr

augassign: "+=" | "-=" | "*=" | "/=" | "//=" | "%="

// functions
funcdef: "def" NAME "(" [NAME ("," NAME)*] ")" ":" block

return_stmt: "return" [expr]

// imports
import_stmt: "import" NAME
           | "from" NAME "import" NAME

// loops, break, continue
for_loop: "for" NAME "in" expr ":" block
while_loop: "while" expr ":" block
break_stmt: "break"
continue_stmt: "continue"

// if, elif, else
if_stmt: "if" expr ":" block elifs ["else" ":" block]
elifs: elif_*
elif_: "elif" expr ":" block

// code block
block: NEWLINE _INDENT stmt+ _DEDENT

// expressions
?expr: NAME
     | NUMBER
     | STRING
     | list_expr
     | tuple_expr
     | dict_expr
     | func_call
     | expr "+" expr   -> add
     | expr "-" expr   -> sub
     | expr "*" expr   -> mul
     | expr "/" expr   -> div
     | expr "//" expr  -> floordiv
     | expr "%" expr   -> mod
     | "(" expr ")"
     | expr comp_op expr -> comparison

// data structures
list_expr: "[" [expr ("," expr)*] "]"
tuple_expr: "(" [expr ("," expr)*] ")"
dict_expr: "{" [pair ("," pair)*] "}"
pair: expr ":" expr

// function call
func_call: NAME "(" [expr ("," expr)*] ")"

// comparison
comp_op: "<" | ">" | "==" | "!=" | "<=" | ">="

// simple tokens
NAME: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /\d+/
STRING: /"([^"]*)"/

// whitespace
%import common.WS
%ignore WS
%import common.NEWLINE
%declare _INDENT _DEDENT